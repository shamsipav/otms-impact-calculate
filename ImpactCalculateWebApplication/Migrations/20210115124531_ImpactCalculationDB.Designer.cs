// <auto-generated />
using ImpactCalculateWebApplication;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ImpactCalculateWebApplication.Migrations
{
    [DbContext(typeof(ImpactCalculationDBContext))]
    [Migration("20210115124531_ImpactCalculationDB")]
    partial class ImpactCalculationDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ImpactCalculateWebApplication.Models.InputDataModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Air_Pressure")
                        .HasColumnType("REAL");

                    b.Property<double>("Air_Spend")
                        .HasColumnType("REAL");

                    b.Property<double>("Air_Temperature")
                        .HasColumnType("REAL");

                    b.Property<double>("Al2O3")
                        .HasColumnType("REAL");

                    b.Property<double>("AverageWaterSteamTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("CO2_Percentage")
                        .HasColumnType("REAL");

                    b.Property<double>("CO_Percentage")
                        .HasColumnType("REAL");

                    b.Property<double>("CaO")
                        .HasColumnType("REAL");

                    b.Property<double>("Cocks")
                        .HasColumnType("REAL");

                    b.Property<double>("FeO")
                        .HasColumnType("REAL");

                    b.Property<double>("Gabbro")
                        .HasColumnType("REAL");

                    b.Property<double>("Gas")
                        .HasColumnType("REAL");

                    b.Property<double>("InputWaterWaste")
                        .HasColumnType("REAL");

                    b.Property<double>("Limestone")
                        .HasColumnType("REAL");

                    b.Property<double>("M_Limestone")
                        .HasColumnType("REAL");

                    b.Property<double>("MgO")
                        .HasColumnType("REAL");

                    b.Property<double>("N2_Percentage")
                        .HasColumnType("REAL");

                    b.Property<double>("O2_Percentage")
                        .HasColumnType("REAL");

                    b.Property<double>("OutputWaterWaste")
                        .HasColumnType("REAL");

                    b.Property<double>("SiO2")
                        .HasColumnType("REAL");

                    b.Property<double>("Smelt_Temperature")
                        .HasColumnType("REAL");

                    b.Property<double>("Smoke_Temperature")
                        .HasColumnType("REAL");

                    b.Property<double>("Viscosity")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.ToTable("Inputs");
                });

            modelBuilder.Entity("ImpactCalculateWebApplication.Models.ResultDataModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Device_A")
                        .HasColumnType("REAL");

                    b.Property<double>("Device_V_Alpha")
                        .HasColumnType("REAL");

                    b.Property<double>("Device_V_Waste")
                        .HasColumnType("REAL");

                    b.Property<double>("Gas_A")
                        .HasColumnType("REAL");

                    b.Property<double>("Gas_V_Alpha")
                        .HasColumnType("REAL");

                    b.Property<double>("Gas_V_Waste")
                        .HasColumnType("REAL");

                    b.Property<double>("La")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalanceOnTonOfSmelt_Cocks")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalanceOnTonOfSmelt_Dust")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalanceOnTonOfSmelt_Gabbro")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalanceOnTonOfSmelt_Gas")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalanceOnTonOfSmelt_Limestone")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalanceOnTonOfSmelt_M_Limestone")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalanceOnTonOfSmelt_OutputGas")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalanceOnTonOfSmelt_Smelt")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalanceOnTonOfSmelt_WasteSum")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalance_Cocks")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalance_Dust")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalance_Gabbro")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalance_Gas")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalance_Limestone")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalance_M_Limestone")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalance_OutputGas")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalance_Smelt")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialBalance_WasteSum")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalanceOnTonOfSmelt_Air")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalanceOnTonOfSmelt_ChemistryUnderburning")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalanceOnTonOfSmelt_Cocks")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalanceOnTonOfSmelt_CoolingWater")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalanceOnTonOfSmelt_Dust")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalanceOnTonOfSmelt_Endoterm_Reactions")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalanceOnTonOfSmelt_Gas")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalanceOnTonOfSmelt_MeltGeneration")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalanceOnTonOfSmelt_OutputGas")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalanceOnTonOfSmelt_SumPlus")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalanceOnTonOfSmelt_SumWaste")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalance_Air")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalance_ChemistryUnderburning")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalance_Cocks")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalance_CoolingWater")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalance_Dust")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalance_Endoterm_Reactions")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalance_Gas")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalance_MeltGeneration")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalance_OutputGas")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalance_SumPlus")
                        .HasColumnType("REAL");

                    b.Property<double>("TeploBalance_SumWaste")
                        .HasColumnType("REAL");

                    b.Property<double>("W_g")
                        .HasColumnType("REAL");

                    b.Property<double>("W_m")
                        .HasColumnType("REAL");

                    b.Property<double>("W_m_g")
                        .HasColumnType("REAL");

                    b.Property<double>("Waste_Difference")
                        .HasColumnType("REAL");

                    b.Property<double>("qCO")
                        .HasColumnType("REAL");

                    b.Property<double>("qCO2")
                        .HasColumnType("REAL");

                    b.Property<double>("qN2")
                        .HasColumnType("REAL");

                    b.Property<double>("qO2")
                        .HasColumnType("REAL");

                    b.Property<double>("qSum")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.ToTable("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
